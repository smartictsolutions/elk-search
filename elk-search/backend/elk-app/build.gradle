import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.network.*
import org.yaml.snakeyaml.Yaml

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.bmuschko.docker-remote-api' version '9.2.1'
    id "com.avast.gradle.docker-compose" version '0.16.11'
    id 'com.github.node-gradle.node' version '3.5.1'
    id 'com.diffplug.spotless' version '6.17.0'
    id "jacoco"
    id "org.sonarqube" version "4.0.0.2929"
}

group = 'com.smartict'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = 'UTF-8'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'docker-compose'
apply plugin: 'org.sonarqube'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    api project(":elk-dto")
    api project(":elk-service-impl")
    api project(":elk-constant")

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    api 'org.springframework.boot:spring-boot-starter-web'

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.elasticsearch.gradle:build-tools:8.3.3'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.9'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client-sniffer:8.8.2'
    implementation 'org.springframework.data:spring-data-elasticsearch:5.1.2'


    // Use JUnit test framework
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.2')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.0.2'

    implementation 'junit:junit:4.13.1'
}

// eclipse'te projeyi run etmek için lazım
mainClassName = 'com.smartict.elk.Application'
applicationDefaultJvmArgs = ["-Dspring.profiles.active=dev"]

/** ===========JAR OLUŞTURMA======================================================================================== */
bootJar() {
    doFirst {
        clean
    }
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Start-Class': 'com.smartict.elk.Application'
    }
}

jar {
    zip64 = true
    enabled = true
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes 'Main-Class': 'com.smartict.elk.Application'
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect() { it.isDirectory() ? it : zipTree(it) }
    } exclude("META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
}


/** ===========DOCKER IMAGE OLUŞTURMA=============================================================================== */
//Uyumsuzluk olmaması için docker-compose-prod dosyasında yazacağımız image ismini alıyor.
def dockerComposeYml = new Yaml().load(new File(new File("$projectDir").getParentFile().getParentFile().getAbsolutePath() + '/DevOps/elk-docker/docker-compose-prod.yml').newInputStream())
def dockerComposeOnlyDbYml = new Yaml().load(new File(new File("$projectDir").getParentFile().getParentFile().getAbsolutePath() + '/DevOps/elk-docker/docker-compose-dev-without-management-tools.yml').newInputStream())
String appDockerImageName = dockerComposeYml["services"]["elk-app"]["image"]

//Bir önceki build sırasında oluşturulan docker image'ı silinir.
task dockerRemoveElkImage(type: DockerRemoveImage) {
    group = "elk build"
    description = "Removes ELK Application docker image"
    targetImageId { appDockerImageName }
    onError {
        System.out.println("No previous image to delete")
    }
}

//Docker build işlemi yapılır(config dosyaları ve Dockerfile kopyalanır. İmage oluşturulur.). Bu build öncesinde sırasıyla dockerRemoveElkImage->spotlessCheck->bootJar çalıştırıldıktan sonra build çalıştırılır.
task dockerBuildElkImage(type: DockerBuildImage, dependsOn: [dockerRemoveElkImage, spotlessCheck.mustRunAfter('dockerRemoveElkImage'), bootJar.mustRunAfter(spotlessCheck), clean]) {
    group = "elk build"
    description = "Creates ELK Application docker image. It removes any previous images, creates a deployable Spring Boot jar file and bundles everything in a docker image"
    doFirst {
        println 'Starting copy for Dockerfile...'
        copy {
            from './Dockerfile'
            into 'build/libs'
        }
        println 'Starting copy for config files...'
        copy {
            from 'src/main/resources/application-prod.yml'
            into '../../DevOps/elk-docker/elk_exposed_config'
            rename('application-prod.yml', 'elk-app-config-base.yml')
        }
    }
    description = "Builds ${appDockerImageName} docker image."
    inputDir.set(file('build/libs'))
    images.add(appDockerImageName)
}

//Oluşturulan docker image'ı kaydedilir.
task dockerSaveElkImage(dependsOn: dockerBuildElkImage, type: DockerSaveImage) {
    group = "elk build"
    description = "This task creates ELK Application docker image and exports it as a .tar file to be deployed remotely"
    destFile.set(file("../../DevOps/elk-docker/${appDockerImageName}.tar"))
    images.set([appDockerImageName])
    // bu olmazsa Jenkins'te bu task '> Task :dockerSaveElkImage UP-TO-DATE' olarak görünüyor ve yeni imaj yerine önceki sunucuya kopyalanıyor
    outputs.upToDateWhen { false } // https://stackoverflow.com/a/18410574
}

dockerCompose {
    useComposeFiles = ['../../DevOps/elk-docker/docker-compose-dev.yml']
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

dockerCompose {
    // settings as usual
    dbOnly {
        useComposeFiles = ['../../DevOps/elk-docker/docker-compose-dev-without-management-tools.yml']
    }
}

/** ===========SPOTLESS============================================================================================= */
spotless {
    java {
        target '**/*.java'
        licenseHeader '/* SmartICT Bilisim A.S. (C) $YEAR */'
        eclipse().configFile '../elk-java-code-style.xml'
        removeUnusedImports()
        importOrder('java', 'javax', 'com.smartict', 'com.ict', '')
    }
}

/** ===========TEST==================================================================================================
 * Buradaki docker tasklarını manuel olarak çalıştırmaya gerek yok.
 * Sonra testler çalıştırılıyor.
 * Testler bittikten sonra (testler başarısız da olsa) docker containerı durdurulup siliniyor.
 *
 * (docker container rm -f elk-int-test-db) komutu ile silinmesi gerekir.
 */

String testDbNetworkName = "elk-int-test-net"
task dockerCreateTestNetwork(type: DockerCreateNetwork) {
    group = "integration tests database (PostGIS) container"
    description = "Creates network for integration tests db."
    networkName.set(testDbNetworkName)
}

task dockerRemoveTestNetwork(type: DockerRemoveNetwork) {
    group = "integration tests database (PostGIS) container"
    description = "Removes network for integration tests db."
    networkId.set(dockerCreateTestNetwork.getNetworkId())
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "${task.name} başarısız!"
        tasks.dockerRemoveTestNetwork.start()
    }
}

/** ================================================================================================================ */
targetCompatibility = JavaVersion.VERSION_17
